General ideas:
1. Calculate the number of numbers that prefix with result.
This number prefixed by result may be of the form
[result, result+1)
[result*10, (result+1)*10 )
[result*100, (result+1)*100 )
...
But it also shall belong to [1, n]
Therefore, we can easily calculate the number of elements prefixed by result using the following code (not considering overflow):

////////////////////////////////////////////////////////////////////////////////////////////////////
            int count = 0;
            for (int first = result, last = result + 1; // the first interval: [first, last)
                first <= n; // the interval is not empty
                first *= 10, last *= 10) // increase a digit
            {
                // valid interval = [first, last) union [first, n]
                count += (min(n + 1, last) - first); // add the length of interval
            }
////////////////////////////////////////////////////////////////////////////////////////////////////


2. Search next prefix, or search more detailedly.

If the number of numbers that prefixed by result is smaller than the remaining k, we do not need to consider the numbers prefixed by result any more, and march to the next prefix: result+1;
Otherwise, we need to search more detailedly, by appending another digit to the prefix. Such search shall start with result*10.



3. Complexities:

Time Complexity: O( (logn) ^ 2 )
Here, logn is the number of digits in n, and it is also the number of replication appending zero to search detailedly. Each such appending may introduce the increasement of prefix at most 10 times, and each increasement may require an O(logn) to calculate the number of numbers that prefixed by the result.
Space Complexity: O(1)
